{
  "version": 3,
  "sources": ["../../../src/contentlayer/utils/url-from-file-path.ts", "../../../src/contentlayer/schemas/blog-post.ts", "../../../src/contentlayer/utils/toc-plugin.ts", "../../../src/contentlayer/utils/sections-plugin.ts", "../../../contentlayer.config.ts"],
  "sourcesContent": ["import type { DocumentGen } from \"contentlayer2/core\";\n\nexport const urlFromFilePath = (\n  page: DocumentGen,\n  includeOrder?: boolean\n): string => {\n  let urlPath = page._raw.flattenedPath;\n  if (!urlPath.startsWith(\"/\")) urlPath = `/${urlPath}`;\n\n  if (!includeOrder)\n    urlPath = urlPath\n      .split(\"/\")\n      .map((segment: string) => segment.replace(/^\\d\\d\\d\\-|^\\d\\d\\d\\d\\-/, \"\"))\n      .join(\"/\");\n\n  return urlPath;\n};\n", "import { DocHeading, DocsSection } from \"@/utils/types/util-types\";\nimport { urlFromFilePath } from \"../utils/url-from-file-path\";\nimport { defineDocumentType } from \"contentlayer2/source-files\";\nimport { bundleMDX } from \"mdx-bundler\";\nimport { defineNestedType } from \"contentlayer2/source-files\";\nimport { tocPlugin } from \"../utils/toc-plugin\";\nimport { sectionsPlugin } from \"../utils/sections-plugin\";\n\nexport const Author = defineNestedType(() => ({\n  name: \"Author\",\n  fields: {\n    name: {\n      type: \"string\",\n      description: \"Name of the author.\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"Role or other description of the author.\",\n      required: true,\n    },\n    avatar: {\n      type: \"string\",\n      description:\n        \"URL of an avatar image. Either local (/images/...) or Twitter profile picture URL for example.\",\n      required: true,\n    },\n    twitter: {\n      type: \"string\",\n      description: \"Twitter profile URL.\",\n      required: false,\n    },\n  },\n}));\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: \"BlogPost\",\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    excerpt: {\n      type: \"string\",\n      description: \"A brief description of the content\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      required: true,\n      description: \"Publishing date\",\n    },\n    relatedPosts: {\n      type: \"list\",\n      description: \"List of slugs for related posts.\",\n      of: { type: \"string\" },\n      required: false,\n    },\n    authors: {\n      type: \"list\",\n      description: \"One or more authors of the post.\",\n      of: Author,\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (post) => `/${post._raw.flattenedPath}`,\n    },\n    urlPath: {\n      type: \"string\",\n      description: \"The URL path of this post relative to site root.\",\n      resolve: urlFromFilePath,\n    },\n    headings: {\n      type: \"json\",\n      resolve: async (page) => {\n        const headings: DocHeading[] = [];\n        await bundleMDX({\n          source: page.body.raw,\n          mdxOptions: (opts) => {\n            opts.remarkPlugins = [\n              ...(opts.remarkPlugins ?? []),\n              tocPlugin(headings) as any,\n            ];\n            return opts;\n          },\n        });\n        return [{ level: 1, title: page.title }, ...headings];\n      },\n    },\n    sections: {\n      type: \"json\",\n      resolve: async (page) => {\n        const sections: DocsSection[] = [];\n        await bundleMDX({\n          source: page.body.raw,\n          mdxOptions: (opts) => {\n            opts.remarkPlugins = [\n              ...(opts.remarkPlugins ?? []),\n              sectionsPlugin(sections) as any,\n            ];\n            return opts;\n          },\n        });\n        return sections;\n      },\n    },\n  },\n}));\n", "import type * as unified from \"unified\";\nimport GithubSlugger from \"github-slugger\";\nimport { toString } from \"hast-util-to-string\";\nimport { DocHeading } from \"@/utils/types/util-types\";\n\nexport const tocPlugin =\n  (headings: DocHeading[]): unified.Plugin =>\n  () => {\n    const slugger = new GithubSlugger();\n    return (node: any) => {\n      for (const element of node.children.filter(\n        (_: any) => _.type === \"heading\"\n      )) {\n        const title = toString(element);\n        headings.push({\n          level: element.depth,\n          title,\n          slug: slugger.slug(title),\n        });\n      }\n    };\n  };\n", "import type * as unified from \"unified\";\nimport { toMarkdown } from \"mdast-util-to-markdown\";\nimport { mdxToMarkdown } from \"mdast-util-mdx\";\nimport { DocsSection } from \"@/utils/types/util-types\";\n\nexport const sectionsPlugin =\n  (sections: DocsSection[]): unified.Plugin =>\n  () => {\n    return (node: any) => {\n      let currentSection: any = { heading: undefined, content: \"\" };\n      let first: boolean = true;\n\n      for (const element of node.children) {\n        if (element.type === \"heading\") {\n          if (!first) {\n            sections.push(currentSection);\n            currentSection = { heading: undefined, content: \"\" };\n          }\n          first = false;\n          const title = toMarkdown(\n            { type: \"paragraph\", children: element.children },\n            { extensions: [mdxToMarkdown()] }\n          )\n            .trim()\n            .replace(/<.*$/g, \"\")\n            .replace(/\\\\/g, \"\")\n            .trim();\n          currentSection.heading = { level: element.depth, title };\n        } else if (element.type === \"paragraph\") {\n          const content =\n            element.children.map((child: any) => child.value).join(\"\") + \" \";\n          currentSection.content += content;\n        }\n      }\n    };\n  };\n", "// contentlayer.config.ts\nimport { BlogPost } from \"./src/contentlayer/schemas/blog-post\";\nimport { makeSource } from \"contentlayer2/source-files\";\nimport highlight from \"rehype-highlight\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport codeImport from \"remark-code-import\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkShikiTwoslash from \"remark-shiki-twoslash\";\nimport remarkMdxCodeMeta from \"remark-mdx-code-meta\";\nimport rehypeRaw from \"rehype-raw\";\nimport { nodeTypes } from \"@mdx-js/mdx\";\nimport type { Options as RehypePrettyCodeOptions } from \"rehype-pretty-code\";\n\nexport const CODE_BLOCK_FILENAME_REGEX = /filename=\"([^\"]+)\"/;\n\nconst DEFAULT_REHYPE_PRETTY_CODE_OPTIONS: RehypePrettyCodeOptions = {\n  onVisitLine(node: any) {\n    // Prevent lines from collapsing in `display: grid` mode, and\n    // allow empty lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: \"text\", value: \" \" }];\n    }\n  },\n  onVisitHighlightedLine(node: any) {\n    if (!node.properties.className) node.properties.className = [];\n    node.properties.className.push(\"highlighted\");\n  },\n  onVisitHighlightedChars(node: any) {\n    node.properties.className = [\"highlighted\"];\n  },\n  filterMetaString: (meta: string) =>\n    meta.replace(CODE_BLOCK_FILENAME_REGEX, \"\"),\n};\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [BlogPost],\n  mdx: {\n    remarkPlugins: [\n      [codeImport as any, { rootDir: process.cwd() + \"/content\" }],\n      [\n        (remarkShikiTwoslash as any).default,\n        { themes: [\"github-dark\", \"github-light\"] },\n      ],\n      // [conditionalShikiTwoslash, { theme: \"github-dark\" }],\n      remarkGfm,\n      remarkMdxCodeMeta as any,\n    ],\n    rehypePlugins: [\n      [rehypeRaw, { passThrough: nodeTypes }],\n      [\n        rehypePrettyCode,\n        { ...DEFAULT_REHYPE_PRETTY_CODE_OPTIONS, theme: \"github-dark\" },\n      ] as any,\n      [rehypeSlug],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
